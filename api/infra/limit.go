//nolint:revive
package infra

// The following file has been autogenerated. Please avoid any changes!
import (
	"errors"

	vapiProtocolClient_ "github.com/vmware/vsphere-automation-sdk-go/runtime/protocol/client"
	client0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/infra"
	model0 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/model"
	client1 "github.com/vmware/vsphere-automation-sdk-go/services/nsxt/orgs/projects/infra"

	utl "github.com/vmware/terraform-provider-nsxt/api/utl"
)

type LimitClientContext utl.ClientContext

func NewLimitsClient(sessionContext utl.SessionContext, connector vapiProtocolClient_.Connector) *LimitClientContext {
	var client interface{}

	switch sessionContext.ClientType {

	case utl.Local:
		client = client0.NewLimitsClient(connector)

	case utl.Multitenancy:
		client = client1.NewLimitsClient(connector)

	default:
		return nil
	}
	return &LimitClientContext{Client: client, ClientType: sessionContext.ClientType, ProjectID: sessionContext.ProjectID, VPCID: sessionContext.VPCID}
}

func (c LimitClientContext) Get(limitIdParam string) (model0.Limit, error) {
	var obj model0.Limit
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.LimitsClient)
		obj, err = client.Get(limitIdParam)
		if err != nil {
			return obj, err
		}

	case utl.Multitenancy:
		client := c.Client.(client1.LimitsClient)
		obj, err = client.Get(utl.DefaultOrgID, c.ProjectID, limitIdParam)
		if err != nil {
			return obj, err
		}

	default:
		return obj, errors.New("invalid infrastructure for model")
	}
	return obj, err
}

func (c LimitClientContext) Patch(limitIdParam string, limitParam model0.Limit) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.LimitsClient)
		_, err = client.Patch(limitIdParam, limitParam)

	case utl.Multitenancy:
		client := c.Client.(client1.LimitsClient)
		_, err = client.Patch(utl.DefaultOrgID, c.ProjectID, limitIdParam, limitParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c LimitClientContext) Delete(limitIdParam string) error {
	var err error

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.LimitsClient)
		err = client.Delete(limitIdParam)

	case utl.Multitenancy:
		client := c.Client.(client1.LimitsClient)
		err = client.Delete(utl.DefaultOrgID, c.ProjectID, limitIdParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return err
}

func (c LimitClientContext) List(cursorParam *string, includeMarkForDeleteObjectsParam *bool, includedFieldsParam *string, pageSizeParam *int64, sortAscendingParam *bool, sortByParam *string) (model0.LimitListResult, error) {
	var err error
	var obj model0.LimitListResult

	switch c.ClientType {

	case utl.Local:
		client := c.Client.(client0.LimitsClient)
		obj, err = client.List(cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	case utl.Multitenancy:
		client := c.Client.(client1.LimitsClient)
		obj, err = client.List(utl.DefaultOrgID, c.ProjectID, cursorParam, includeMarkForDeleteObjectsParam, includedFieldsParam, pageSizeParam, sortAscendingParam, sortByParam)

	default:
		err = errors.New("invalid infrastructure for model")
	}
	return obj, err
}
